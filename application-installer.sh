#!/bin/bash

# Ubuntu Program Kurulum Y√∂neticisi - Zenity GUI Version v2.2
# Kritik hatalar, yapƒ±sal ve performans sorunlarƒ± d√ºzeltilmi≈ü versiyon

# Hata y√∂netimi - sadece undefined variables i√ßin strict mode
set -u

# Temel deƒüi≈ükenler
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="$SCRIPT_DIR/kurulum.log"
TEMP_DIR="/tmp/ubuntu-installer-$$"  # PID ile unique temp dizin
APT_UPDATED=false  # apt update kontrol√º i√ßin

# Cleanup fonksiyonu
cleanup() {
    if [[ -d "$TEMP_DIR" ]]; then
        rm -rf "$TEMP_DIR"
    fi
}
trap cleanup EXIT

# Temp dizini olu≈ütur
mkdir -p "$TEMP_DIR"

# Paket a√ßƒ±klamalarƒ± - Merkezi y√∂netim
declare -A PACKAGE_DESCRIPTIONS=(
    ["git"]="Git Versiyon Kontrol"
    ["curl"]="URL Transfer Aracƒ±"
    ["wget"]="Web Dosya ƒ∞ndirici"
    ["vim"]="Geli≈ümi≈ü Metin Edit√∂r√º"
    ["build-essential"]="Temel Geli≈ütirme Ara√ßlarƒ±"
    ["python3-pip"]="Python Paket Y√∂neticisi"
    ["nodejs"]="Node.js JavaScript Runtime"
    ["code"]="Visual Studio Code"
    ["vlc"]="VLC Media Player"
    ["gimp"]="GIMP G√∂r√ºnt√º Edit√∂r√º"
    ["firefox"]="Firefox Web Tarayƒ±cƒ±sƒ±"
    ["audacity"]="Ses D√ºzenleme Programƒ±"
    ["spotify"]="Spotify M√ºzik Uygulamasƒ±"
    ["discord"]="Discord ƒ∞leti≈üim Uygulamasƒ±"
    ["htop"]="Sistem Monit√∂r√º"
    ["neofetch"]="Sistem Bilgi G√∂sterici"
    ["tree"]="Dizin Aƒüacƒ± G√∂sterici"
    ["unzip"]="ZIP Ar≈üiv A√ßƒ±cƒ±"
    ["gparted"]="Disk B√∂l√ºmleme Aracƒ±"
    ["synaptic"]="Grafik Paket Y√∂neticisi"
    ["ufw"]="G√ºvenlik Duvarƒ±"
    ["libreoffice"]="LibreOffice Ofis Paketi"
    ["thunderbird"]="Thunderbird E-posta ƒ∞stemcisi"
    ["evince"]="PDF G√∂r√ºnt√ºleyici"
    ["flameshot"]="Ekran G√∂r√ºnt√ºs√º Aracƒ±"
    ["telegram-desktop"]="Telegram Masa√ºst√º"
)

# Paket kurulum y√∂ntemleri - Merkezi y√∂netim
declare -A PACKAGE_DEFAULT_METHODS=(
    ["git"]="apt"
    ["curl"]="apt"
    ["wget"]="apt"
    ["vim"]="apt"
    ["htop"]="apt"
    ["tree"]="apt"
    ["unzip"]="apt"
    ["gparted"]="apt"
    ["firefox"]="apt"
    ["libreoffice"]="apt"
    ["thunderbird"]="apt"
    ["evince"]="apt"
    ["flameshot"]="apt"
    ["audacity"]="apt"
    ["gimp"]="apt"
    ["build-essential"]="apt"
    ["python3-pip"]="apt"
    ["neofetch"]="apt"
    ["synaptic"]="apt"
    ["ufw"]="apt"
    ["vlc"]="apt"
    ["spotify"]="snap"
    ["discord"]="snap"
    ["telegram-desktop"]="snap"
    ["code"]="special"
    ["nodejs"]="special"
)

# Zenity kontrol√º
check_zenity() {
    if ! command -v zenity >/dev/null 2>&1; then
        echo "Zenity kuruluyor..."
        sudo apt-get update >/dev/null 2>&1
        sudo apt-get install -y zenity >/dev/null 2>&1
    fi
}

# Log fonksiyonlarƒ± - Geli≈ütirilmi≈ü
log_info() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] $1" >> "$LOG_FILE"
}

log_error() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] $1" >> "$LOG_FILE"
}

log_success() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] $1" >> "$LOG_FILE"
}

# Dialog fonksiyonlarƒ±
show_error() {
    zenity --error --title="Hata" --text="$1" --width=400
    log_error "$1"
}

show_info() {
    zenity --info --title="Bilgi" --text="$1" --width=400
    log_info "$1"
}

ask_confirmation() {
    zenity --question --title="Onay" --text="$1" --width=400
}

# APT update fonksiyonu - Tekrarƒ± √∂nler
update_apt_if_needed() {
    if [[ "$APT_UPDATED" == "false" ]]; then
        log_info "APT paket listesi g√ºncelleniyor..."
        if sudo apt-get update >/dev/null 2>&1; then
            APT_UPDATED=true
            return 0
        else
            return 1
        fi
    fi
    return 0
}

# G√ºvenli sudo kontrol√º
check_sudo_access() {
    if ! sudo -n true 2>/dev/null; then
        # Zenity password dialog ile 3 deneme hakkƒ±
        local attempts=0
        while [[ $attempts -lt 3 ]]; do
            if zenity --password --title="Y√∂netici ≈ûifresi Gerekli" | sudo -S true 2>/dev/null; then
                return 0
            fi
            ((attempts++))
            if [[ $attempts -lt 3 ]]; then
                zenity --error --text="Hatalƒ± ≈üifre. $((3-attempts)) deneme hakkƒ±nƒ±z kaldƒ±." --width=300
            fi
        done
        return 1
    fi
    return 0
}

# Sistem kontrol√º - ƒ∞yile≈ütirilmi≈ü
check_system() {
    local check_passed=true
    
    (
        echo "10" ; echo "# Sudo yetkileri kontrol ediliyor..."
        sleep 0.5
        
        if ! check_sudo_access; then
            check_passed=false
            echo "100"
            exit 1
        fi
        
        echo "40" ; echo "# ƒ∞nternet baƒülantƒ±sƒ± kontrol ediliyor..."
        sleep 0.5
        if ! ping -c 1 8.8.8.8 >/dev/null 2>&1; then
            check_passed=false
            echo "100"
            exit 1
        fi
        
        echo "70" ; echo "# Paket veritabanƒ± g√ºncelleniyor..."
        if ! update_apt_if_needed; then
            check_passed=false
            echo "100"
            exit 1
        fi
        
        echo "100" ; echo "# Sistem kontrol√º tamamlandƒ±"
        sleep 0.5
    ) | zenity --progress \
        --title="Sistem Kontrol√º" \
        --text="Ba≈ülatƒ±lƒ±yor..." \
        --width=400 \
        --auto-close \
        --no-cancel || true
    
    if [[ $? -ne 0 ]] && [[ "$check_passed" == "false" ]]; then
        show_error "Sistem kontrol√º ba≈üarƒ±sƒ±z!"
        exit 1
    fi
    
    log_info "Sistem kontrol√º tamamlandƒ±"
}

# Kurulum tercihi se√ßimi
select_installation_preference() {
    local preference=$(zenity --list \
        --title="Kurulum Tercihi" \
        --text="üõ†Ô∏è Programlar nasƒ±l kurulsun?" \
        --radiolist \
        --column="Se√ß" \
        --column="Y√∂ntem" \
        --column="A√ßƒ±klama" \
        --width=700 \
        --height=400 \
        TRUE "auto" "ü§ñ Otomatik (√ñnerilen) - Her program en uygun y√∂ntemle kurulur" \
        FALSE "apt_only" "üì¶ Sadece APT - Hƒ±zlƒ± ve g√ºvenilir Ubuntu paketleri" \
        FALSE "prefer_snap" "üîÑ Snap √ñncelikli - Modern ve g√ºncel s√ºr√ºmler" \
        FALSE "manual" "‚öôÔ∏è Manuel Kontrol - Her program i√ßin ayrƒ± se√ßim" 2>/dev/null)
    
    if [[ -z "$preference" ]]; then
        return 1
    fi
    
    case "$preference" in
        "auto")
            show_info "ü§ñ OTOMATƒ∞K MOD SE√áƒ∞LDƒ∞

‚Ä¢ Her program en uygun y√∂ntemle kurulur
‚Ä¢ Hƒ±zlƒ± ve g√ºvenilir se√ßenekler √∂ncelikli
‚Ä¢ Manuel m√ºdahale gerekmez

√ñrnek:
‚Ä¢ Git, VLC ‚Üí APT (hƒ±zlƒ±)
‚Ä¢ Spotify, Discord ‚Üí Snap (g√ºncel)
‚Ä¢ VS Code ‚Üí √ñzel kurulum (en stabil)"
            ;;
        "apt_only")
            show_info "üì¶ SADECE APT MOD SE√áƒ∞LDƒ∞

‚Ä¢ T√ºm programlar Ubuntu deposundan kurulur
‚Ä¢ En hƒ±zlƒ± kurulum
‚Ä¢ En az disk kullanƒ±mƒ±
‚Ä¢ Bazen eski s√ºr√ºmler olabilir"
            ;;
        "prefer_snap")
            show_info "üîÑ SNAP √ñNCELƒ∞KLƒ∞ MOD SE√áƒ∞LDƒ∞

‚Ä¢ M√ºmk√ºn olan programlar Snap ile kurulur
‚Ä¢ Her zaman g√ºncel s√ºr√ºmler
‚Ä¢ Daha fazla disk kullanƒ±mƒ±
‚Ä¢ ƒ∞zole ve g√ºvenli kurulum"
            ;;
        "manual")
            show_info "‚öôÔ∏è MANUEL KONTROL MOD SE√áƒ∞LDƒ∞

‚Ä¢ Her program i√ßin kurulum y√∂ntemi sorulacak
‚Ä¢ Tam kontrol sizde
‚Ä¢ Daha uzun kurulum s√ºreci
‚Ä¢ ƒ∞leri kullanƒ±cƒ±lar i√ßin ideal"
            ;;
    esac
    
    echo "$preference"
}

# Kurulum modu se√ßimi
select_installation_mode() {
    local mode=$(zenity --list \
        --title="Kurulum Modu Se√ßimi" \
        --text="üéØ Kategorilerdeki programlar nasƒ±l kurulsun?" \
        --radiolist \
        --column="Se√ß" \
        --column="Mod" \
        --column="A√ßƒ±klama" \
        --width=650 \
        --height=350 \
        TRUE "full" "‚ö° Kategori Dolu - Se√ßilen kategorilerdeki T√úM programlarƒ± kur" \
        FALSE "selective" "üîç Se√ßmeli - Her kategoride hangi programlarƒ± kuracaƒüƒ±nƒ± se√ß" 2>/dev/null)
    
    if [[ -z "$mode" ]]; then
        return 1
    fi
    
    case "$mode" in
        "full")
            show_info "‚ö° KATEGORƒ∞ DOLU MOD SE√áƒ∞LDƒ∞

‚Ä¢ Se√ßilen kategorilerdeki T√úM programlar kurulur
‚Ä¢ En hƒ±zlƒ± ve kolay y√∂ntem
‚Ä¢ Yeni kullanƒ±cƒ±lar i√ßin ideal

üì¶ Kurulacak program sayƒ±sƒ± fazla olabilir."
            ;;
        "selective")
            show_info "üîç SE√áMELƒ∞ MOD SE√áƒ∞LDƒ∞

‚Ä¢ Her kategori i√ßin hangi programlarƒ± kuracaƒüƒ±nƒ±zƒ± se√ßebilirsiniz
‚Ä¢ Tam kontrol ve esneklik
‚Ä¢ ƒ∞leri kullanƒ±cƒ±lar i√ßin ideal

‚è±Ô∏è Her kategori i√ßin ayrƒ± se√ßim penceresi a√ßƒ±lacak."
            ;;
    esac
    
    echo "$mode"
}

# Kategori se√ßimi
select_categories() {
    local categories=$(zenity --list \
        --title="Kategori Se√ßimi" \
        --text="Kurmak istediƒüiniz kategorileri se√ßin:" \
        --checklist \
        --column="Se√ß" \
        --column="Kategori" \
        --column="A√ßƒ±klama" \
        --width=600 \
        --height=400 \
        --separator="|" \
        TRUE "development" "Geli≈ütirici Ara√ßlarƒ± (Git, VS Code, Node.js)" \
        TRUE "multimedia" "Multimedya (VLC, GIMP, Spotify)" \
        TRUE "system" "Sistem Ara√ßlarƒ± (Htop, GParted, UFW)" \
        TRUE "office" "Ofis (LibreOffice, Thunderbird, Telegram)" 2>/dev/null)
    
    if [[ -z "$categories" ]]; then
        show_info "Hi√ßbir kategori se√ßilmedi. Ana men√ºye d√∂n√ºl√ºyor."
        return 1
    fi
    
    log_info "Se√ßilen kategoriler (select_categories): $categories"
    echo "$categories"
}

# Kurulum y√∂ntemi belirleme - ƒ∞yile≈ütirilmi≈ü
get_install_method() {
    local package="$1"
    local preference="$2"
    
    case "$preference" in
        "auto")
            echo "${PACKAGE_DEFAULT_METHODS[$package]:-apt}"
            ;;
        "apt_only")
            if [[ "${PACKAGE_DEFAULT_METHODS[$package]}" == "special" ]]; then
                echo "special"
            else
                echo "apt"
            fi
            ;;
        "prefer_snap")
            case "${PACKAGE_DEFAULT_METHODS[$package]}" in
                "special")
                    echo "special"
                    ;;
                "apt")
                    # Bazƒ± paketler snap'te yoktur
                    if [[ "$package" =~ ^(build-essential|python3-pip|unzip|gparted|synaptic|ufw|evince)$ ]]; then
                        echo "apt"
                    else
                        echo "snap"
                    fi
                    ;;
                *)
                    echo "snap"
                    ;;
            esac
            ;;
        "manual")
            local method=$(zenity --list \
                --title="$package Kurulum Y√∂ntemi" \
                --text="$package nasƒ±l kurulsun?" \
                --radiolist \
                --column="Se√ß" \
                --column="Y√∂ntem" \
                --column="A√ßƒ±klama" \
                --width=600 \
                --height=300 \
                TRUE "apt" "üì¶ APT - Hƒ±zlƒ± ve g√ºvenilir" \
                FALSE "snap" "üîÑ Snap - G√ºncel ve izole" 2>/dev/null)
            
            if [[ -z "$method" ]]; then
                echo "skip"
            else
                echo "$method"
            fi
            ;;
    esac
}

# Paket kurulu mu kontrol√º - ƒ∞yile≈ütirilmi≈ü
is_package_installed() {
    local package="$1"
    local method="$2"
    
    case "$method" in
        "apt")
            dpkg -s "$package" 2>/dev/null | grep -q "Status: install ok installed"
            ;;
        "snap")
            snap list 2>/dev/null | grep -q "^$package "
            ;;
        "special")
            case "$package" in
                "nodejs")
                    command -v node >/dev/null 2>&1
                    ;;
                "code")
                    command -v code >/dev/null 2>&1
                    ;;
            esac
            ;;
    esac
}

# VS Code kurulum fonksiyonu
install_vscode() {
    local vscode_list="/etc/apt/sources.list.d/vscode.list"
    local ms_gpg="/etc/apt/trusted.gpg.d/packages.microsoft.gpg"
    
    # Microsoft GPG anahtarƒ±nƒ± indir ve y√ºkle
    if ! wget -qO- https://packages.microsoft.com/keys/microsoft.asc | \
         gpg --dearmor > "$TEMP_DIR/packages.microsoft.gpg" 2>/dev/null; then
        return 1
    fi
    
    if ! sudo install -o root -g root -m 644 "$TEMP_DIR/packages.microsoft.gpg" "$ms_gpg" 2>/dev/null; then
        return 1
    fi
    
    # Repository ekle
    echo "deb [arch=amd64,arm64,armhf signed-by=$ms_gpg] https://packages.microsoft.com/repos/code stable main" | \
        sudo tee "$vscode_list" >/dev/null
    
    # APT g√ºncelle ve VS Code kur
    update_apt_if_needed
    sudo apt-get install -y code >/dev/null 2>&1
}

# Node.js kurulum fonksiyonu
install_nodejs() {
    # NodeSource repository ekle
    if ! curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - >/dev/null 2>&1; then
        return 1
    fi
    
    # Node.js kur
    sudo apt-get install -y nodejs >/dev/null 2>&1
}

# Paket kurulum fonksiyonu - ƒ∞yile≈ütirilmi≈ü
install_package() {
    local package="$1"
    local description="${PACKAGE_DESCRIPTIONS[$package]:-$package}"
    local preference="$2"
    
    local method=$(get_install_method "$package" "$preference")
    
    if [[ "$method" == "skip" ]]; then
        echo "SKIP|$package kurulumu kullanƒ±cƒ± tarafƒ±ndan iptal edildi"
        return 0
    fi
    
    # Paket kurulu mu kontrol et
    if is_package_installed "$package" "$method"; then
        echo "SKIP|$package zaten kurulu ($method)"
        return 0
    fi
    
    # Kurulum yap
    case "$method" in
        "apt")
            update_apt_if_needed
            if sudo apt-get install -y "$package" >/dev/null 2>&1; then
                echo "SUCCESS|$package kuruldu (APT)"
                log_success "$package ba≈üarƒ±yla kuruldu (APT)"
                return 0
            else
                echo "ERROR|$package kurulumunda hata (APT)"
                log_error "$package kurulamadƒ± (APT)"
                return 1
            fi
            ;;
        "snap")
            if ! command -v snap >/dev/null 2>&1; then
                echo "ERROR|Snap kurulu deƒüil"
                log_error "Snap kurulu deƒüil"
                return 1
            fi
            
            if sudo snap install "$package" >/dev/null 2>&1; then
                echo "SUCCESS|$package kuruldu (Snap)"
                log_success "$package ba≈üarƒ±yla kuruldu (Snap)"
                return 0
            else
                echo "ERROR|$package kurulumunda hata (Snap)"
                log_error "$package kurulamadƒ± (Snap)"
                return 1
            fi
            ;;
        "special")
            case "$package" in
                "nodejs")
                    if install_nodejs; then
                        echo "SUCCESS|Node.js kuruldu (NodeSource)"
                        log_success "Node.js ba≈üarƒ±yla kuruldu (NodeSource)"
                        return 0
                    else
                        echo "ERROR|Node.js kurulumunda hata"
                        log_error "Node.js kurulamadƒ±"
                        return 1
                    fi
                    ;;
                "code")
                    if install_vscode; then
                        echo "SUCCESS|VS Code kuruldu (Microsoft)"
                        log_success "VS Code ba≈üarƒ±yla kuruldu (Microsoft)"
                        return 0
                    else
                        echo "ERROR|VS Code kurulumunda hata"
                        log_error "VS Code kurulamadƒ±"
                        return 1
                    fi
                    ;;
            esac
            ;;
    esac
}

# Kategori paket listesi
get_category_packages() {
    local category="$1"
    
    case "$category" in
        "development") 
            echo "git
curl
wget
vim
build-essential
python3-pip
nodejs
code"
            ;;
        "multimedia") 
            echo "vlc
gimp
firefox
audacity
spotify
discord"
            ;;
        "system")
            echo "htop
neofetch
tree
unzip
gparted
synaptic
ufw"
            ;;
        "office")
            echo "libreoffice
thunderbird
evince
flameshot
telegram-desktop"
            ;;
    esac
}

# Kategori adƒ± al
get_category_name() {
    local category="$1"
    
    case "$category" in
        "development") echo "Geli≈ütirici Ara√ßlarƒ±" ;;
        "multimedia") echo "Multimedya Ara√ßlarƒ±" ;;
        "system") echo "Sistem Ara√ßlarƒ±" ;;
        "office") echo "Ofis Ara√ßlarƒ±" ;;
    esac
}

# Se√ßmeli paket se√ßimi
select_packages_in_category() {
    local category="$1"
    local category_name=$(get_category_name "$category")
    local packages=$(get_category_packages "$category")
    
    log_info "Paket se√ßim penceresi a√ßƒ±lƒ±yor: $category_name"
    
    local zenity_args=()
    while IFS= read -r package; do
        [[ -z "$package" ]] && continue
        local description="${PACKAGE_DESCRIPTIONS[$package]:-$package}"
        zenity_args+=(TRUE "$package" "$description")
    done <<< "$packages"
    
    local selected_packages=$(zenity --list \
        --title="$category_name - Paket Se√ßimi" \
        --text="üîΩ $category_name kategorisinden kurmak istediƒüiniz programlarƒ± se√ßin:" \
        --checklist \
        --column="Se√ß" \
        --column="Paket" \
        --column="A√ßƒ±klama" \
        --width=700 \
        --height=500 \
        --separator="|" \
        "${zenity_args[@]}" 2>/dev/null)
    
    if [[ -z "$selected_packages" ]]; then
        show_info "‚ùå $category_name kategorisi i√ßin hi√ßbir paket se√ßilmedi. Bu kategori atlanƒ±yor."
        return 1
    fi
    
    log_info "Se√ßilen paketler ($category_name): $selected_packages"
    echo "$selected_packages"
}

# Kategori kurulum fonksiyonu - D√ºzeltilmi≈ü
install_category() {
    local category="$1"
    local preference="$2"
    local selected_packages="$3"
    local category_name=$(get_category_name "$category")
    
    # Kurulacak paketleri belirle
    local packages_to_install=()
    
    if [[ -n "$selected_packages" ]]; then
        # Se√ßmeli mod - se√ßilen paketleri kullan
        IFS='|' read -ra PACKAGE_ARRAY <<< "$selected_packages"
        for pkg in "${PACKAGE_ARRAY[@]}"; do
            [[ -n "$pkg" ]] && packages_to_install+=("$pkg")
        done
    else
        # Dolu mod - t√ºm paketleri al
        while IFS= read -r package; do
            [[ -n "$package" ]] && packages_to_install+=("$package")
        done <<< "$(get_category_packages "$category")"
    fi
    
    local total_packages=${#packages_to_install[@]}
    
    # Eƒüer kurulacak paket yoksa
    if [[ $total_packages -eq 0 ]]; then
        show_info "Bu kategoride kurulacak paket bulunamadƒ±: $category_name"
        return 0
    fi
    
    # Kurulum onayƒ±
    local package_list=""
    for package in "${packages_to_install[@]}"; do
        local description="${PACKAGE_DESCRIPTIONS[$package]:-$package}"
        package_list+="‚Ä¢ $description\n"
    done
    
    if ! ask_confirmation "üì¶ $category_name KURULUM ONAYI

Kurulacak programlar:
$package_list
Toplam $total_packages paket kurulacak.
Devam edilsin mi?"; then
        show_info "‚ùå $category_name kurulumu iptal edildi."
        return 0
    fi
    
    # Kurulum saya√ßlarƒ±
    local success_count=0
    local skip_count=0
    local error_count=0
    local results_file="$TEMP_DIR/install_results_$"
    
    # Progress bar ile kurulum
    (
        for i in "${!packages_to_install[@]}"; do
            local current_package=$((i + 1))
            local percentage=$((current_package * 100 / total_packages))
            local package="${packages_to_install[$i]}"
            local description="${PACKAGE_DESCRIPTIONS[$package]:-$package}"
            
            echo "$percentage"
            echo "# $description kuruluyor... ($current_package/$total_packages)"
            
            # Kurulum yap ve sonucu dosyaya yaz
            local install_result
            if install_result=$(install_package "$package" "$preference" 2>&1); then
                echo "$install_result" >> "$results_file"
            else
                echo "ERROR|$package kurulumunda hata" >> "$results_file"
            fi
            
            sleep 0.5
        done
        
        echo "100"
        echo "# $category_name kurulumu tamamlandƒ±"
        sleep 1
    ) | zenity --progress \
        --title="$category_name Kuruluyor" \
        --text="Ba≈ülatƒ±lƒ±yor..." \
        --width=500 \
        --auto-close || true
    
    # Sonu√ßlarƒ± oku ve say
    if [[ -f "$results_file" ]]; then
        while IFS='|' read -r status message; do
            case "$status" in
                "SUCCESS") ((success_count++)) ;;
                "SKIP") ((skip_count++)) ;;
                "ERROR") ((error_count++)) ;;
            esac
        done < "$results_file"
        rm -f "$results_file"
    fi
    
    # Sonu√ß raporu
    local report="$category_name Kurulum Raporu:\n\n"
    report+="‚úÖ Ba≈üarƒ±lƒ±: $success_count\n"
    report+="‚è≠Ô∏è Zaten kurulu: $skip_count\n"
    report+="‚ùå Hatalƒ±: $error_count\n\n"
    report+="Toplam: $total_packages paket"
    
    show_info "$report"
    return 0
}

# Ana kurulum fonksiyonu
main_installation() {
    local selected_categories="$1"
    
    # Debug log
    log_info "Se√ßilen kategoriler: $selected_categories"
    
    # Kurulum tercihi se√ß
    local preference
    preference=$(select_installation_preference)
    if [[ -z "$preference" ]]; then
        show_info "‚ùå KURULUM ƒ∞PTAL EDƒ∞LDƒ∞

Kurulum tercihi se√ßilmediƒüi i√ßin i≈ülem iptal edildi.
Ana men√ºye d√∂n√ºl√ºyor..."
        return
    fi
    
    log_info "Kurulum tercihi: $preference"
    
    # Kurulum modu se√ß
    local installation_mode
    installation_mode=$(select_installation_mode)
    if [[ -z "$installation_mode" ]]; then
        show_info "‚ùå KURULUM ƒ∞PTAL EDƒ∞LDƒ∞

Kurulum modu se√ßilmediƒüi i√ßin i≈ülem iptal edildi.
Ana men√ºye d√∂n√ºl√ºyor..."
        return
    fi
    
    log_info "Kurulum modu: $installation_mode"
    
    # Kategorileri i≈üle
    IFS='|' read -ra CATEGORY_ARRAY <<< "$selected_categories"
    
    for category in "${CATEGORY_ARRAY[@]}"; do
        if [[ -n "$category" ]]; then
            log_info "ƒ∞≈ülenen kategori: $category"
            
            if [[ "$installation_mode" == "selective" ]]; then
                # Se√ßmeli mod - paket se√ßimi yap
                log_info "Se√ßmeli mod aktif, paket se√ßim penceresi a√ßƒ±lƒ±yor: $category"
                local selected_packages
                selected_packages=$(select_packages_in_category "$category")
                if [[ -n "$selected_packages" ]]; then
                    log_info "Se√ßilen paketler: $selected_packages"
                    install_category "$category" "$preference" "$selected_packages"
                else
                    log_info "Kategori i√ßin paket se√ßilmedi: $category"
                fi
            else
                # Dolu mod - t√ºm paketleri kur
                log_info "Dolu mod aktif, t√ºm paketler kurulacak: $category"
                install_category "$category" "$preference" ""
            fi
        fi
    done
    
    show_info "üéâ T√úM KURULUMLAR TAMAMLANDI!

üìä Kurulum bilgileri:
‚Ä¢ Mod: $(case "$installation_mode" in "full") echo "‚ö° Kategori Dolu";; "selective") echo "üîç Se√ßmeli";; esac)
‚Ä¢ Y√∂ntem: $(case "$preference" in
    "auto") echo "ü§ñ Otomatik";;
    "apt_only") echo "üì¶ Sadece APT";;
    "prefer_snap") echo "üîÑ Snap √ñncelikli";;
    "manual") echo "‚öôÔ∏è Manuel Kontrol";;
esac)

üìÑ Detaylƒ± log dosyasƒ±: $LOG_FILE
üí° Programlarƒ± masa√ºst√ºnden veya men√ºden bulabilirsiniz.

üîÑ Ana men√ºye d√∂n√ºl√ºyor..."
}

# Paket listesi bilgi
show_package_list_info() {
    zenity --info \
        --title="Paket Listesi Nedir?" \
        --width=600 \
        --height=400 \
        --text="üì¶ PAKET Lƒ∞STESƒ∞ NEDƒ∞R?

Bu √∂zellik, bilgisayarƒ±nƒ±zdaki programlarƒ± kaydetmenizi ve ba≈üka bir bilgisayara aynƒ± programlarƒ± kurmanƒ±zƒ± saƒülar.

üéØ NE ƒ∞≈ûE YARAR?

‚úÖ FORMAT SONRASI: Programlarƒ±nƒ±zƒ± tek tek hatƒ±rlamaya gerek yok!
‚úÖ YENƒ∞ Bƒ∞LGƒ∞SAYAR: Eski bilgisayarƒ±nƒ±zdaki t√ºm programlarƒ± yeni bilgisayara kurun
‚úÖ YEDEKLEME: Programlarƒ±nƒ±zƒ±n listesini g√ºvenli bir yerde saklayƒ±n
‚úÖ EKƒ∞P √áALI≈ûMASI: Aynƒ± programlarƒ± takƒ±m arkada≈ülarƒ±nƒ±zla payla≈üƒ±n

üìù NASIL KULLANILIR?

1. 'Olu≈ütur' ‚Üí ≈ûu anda kurulu programlarƒ±n listesini kaydet
2. 'Geri Y√ºkle' ‚Üí Daha √∂nce kaydedilen listeden programlarƒ± kur

üí° √ñNERƒ∞: Format atmadan √∂nce mutlaka paket listesi olu≈üturun!"
}

# Paket listesi y√∂netimi
manage_package_lists() {
    while true; do
        if ask_confirmation "Paket listesi √∂zelliƒüi hakkƒ±nda bilgi almak ister misiniz?"; then
            show_package_list_info
        fi
        
        local choice=$(zenity --list \
            --title="Paket Listesi Y√∂netimi" \
            --text="üíæ Yapmak istediƒüiniz i≈ülemi se√ßin:" \
            --radiolist \
            --column="Se√ß" \
            --column="ƒ∞≈ülem" \
            --column="A√ßƒ±klama" \
            --width=700 \
            --height=350 \
            TRUE "create" "üìã Mevcut programlarƒ±n listesini olu≈ütur (Yedekleme)" \
            FALSE "restore" "üì• Paket listesinden programlarƒ± kur (Geri Y√ºkleme)" \
            FALSE "info" "‚ÑπÔ∏è Paket listesi hakkƒ±nda detaylƒ± bilgi" \
            FALSE "back" "üîô Ana men√ºye d√∂n" 2>/dev/null)
        
        if [[ -z "$choice" ]] || [[ "$choice" == "back" ]]; then
            return
        fi
        
        case "$choice" in
            "create")
                if ask_confirmation "üìã PAKET Lƒ∞STESƒ∞ OLU≈ûTURMA

Bu i≈ülem, ≈üu anda bilgisayarƒ±nƒ±zda kurulu olan T√úM programlarƒ±n listesini bir dosyaya kaydeder.

üéØ Ne zaman kullanƒ±lƒ±r?
‚Ä¢ Format atmadan √∂nce
‚Ä¢ Yeni bilgisayar almadan √∂nce
‚Ä¢ Program yedeklemesi i√ßin

Devam edilsin mi?"; then
                    
                    local save_path=$(zenity --file-selection \
                        --title="Paket listesini nereye kaydetmek istiyorsunuz?" \
                        --save \
                        --filename="$HOME/benim-programlarim-$(date +%Y%m%d).txt" 2>/dev/null)
                    
                    if [[ -n "$save_path" ]]; then
                        (
                            echo "50" ; echo "# Kurulu programlar taranƒ±yor..."
                            sleep 1
                            dpkg --get-selections | grep -v deinstall > "$save_path"
                            echo "100" ; echo "# Liste olu≈üturuldu"
                            sleep 1
                        ) | zenity --progress \
                            --title="Paket Listesi Olu≈üturuluyor" \
                            --text="ƒ∞≈ülem ba≈ülatƒ±lƒ±yor..." \
                            --width=400 \
                            --auto-close 2>/dev/null
                        
                        local file_size=$(wc -l < "$save_path")
                        show_info "‚úÖ BA≈ûARILI!

üìÑ Dosya: $(basename "$save_path")
üìç Konum: $save_path
üìä Toplam program sayƒ±sƒ±: $file_size

üí° Bu dosyayƒ± g√ºvenli bir yerde saklayƒ±n!"
                    fi
                fi
                ;;
            "restore")
                if ask_confirmation "üì• PAKET Lƒ∞STESƒ∞NDEN KURULUM

Bu i≈ülem, daha √∂nce kaydedilmi≈ü bir paket listesindeki T√úM programlarƒ± bilgisayarƒ±nƒ±za kurar.

‚ö†Ô∏è Dƒ∞KKAT:
‚Ä¢ Bu i≈ülem uzun s√ºrebilir
‚Ä¢ ƒ∞nternet baƒülantƒ±sƒ± gereklidir
‚Ä¢ Bazƒ± programlar kurulmayabilir (artƒ±k mevcut deƒüilse)

Devam edilsin mi?"; then
                    
                    local list_file=$(zenity --file-selection \
                        --title="Hangi paket listesi dosyasƒ±nƒ± kullanmak istiyorsunuz?" \
                        --file-filter="Metin dosyalarƒ± (*.txt) | *.txt" 2>/dev/null)
                    
                    if [[ -n "$list_file" && -f "$list_file" ]]; then
                        local package_count=$(wc -l < "$list_file")
                        
                        if ask_confirmation "üìã SE√áƒ∞LEN Lƒ∞STE Bƒ∞LGƒ∞LERƒ∞:

üìÑ Dosya: $(basename "$list_file")
üìä Program sayƒ±sƒ±: $package_count

Bu listedeki t√ºm programlar kurulacak. 
Bu i≈ülem uzun s√ºrebilir.

Kuruluma ba≈ülansƒ±n mƒ±?"; then
                            
                            (
                                echo "25" ; echo "# Paket listesi okunuyor..."
                                sleep 1
                                sudo dpkg --set-selections < "$list_file"
                                echo "50" ; echo "# Paket veritabanƒ± g√ºncelleniyor..."
                                sleep 1
                                update_apt_if_needed
                                echo "75" ; echo "# Programlar kuruluyor... (Bu uzun s√ºrebilir)"
                                sudo apt-get dselect-upgrade -y >/dev/null 2>&1
                                echo "100" ; echo "# Kurulum tamamlandƒ±"
                                sleep 1
                            ) | zenity --progress \
                                --title="Paket Listesinden Kurulum Yapƒ±lƒ±yor" \
                                --text="ƒ∞≈ülem ba≈ülatƒ±lƒ±yor..." \
                                --width=450 \
                                --auto-close 2>/dev/null
                            
                            show_info "‚úÖ KURULUM TAMAMLANDI!

üìã Liste: $(basename "$list_file")
üìä ƒ∞≈ülenen program: $package_count

üí° Bazƒ± programlar kurulmamƒ±≈ü olabilir (artƒ±k mevcut deƒüil).
Detaylar i√ßin log dosyasƒ±nƒ± kontrol edin."
                        fi
                    fi
                fi
                ;;
            "info")
                show_package_list_info
                ;;
        esac
    done
}

# Log g√∂r√ºnt√ºleme
show_log() {
    if [[ -f "$LOG_FILE" ]]; then
        zenity --text-info \
            --title="Kurulum Loglarƒ±" \
            --filename="$LOG_FILE" \
            --width=800 \
            --height=600 \
            --ok-label="Kapat" 2>/dev/null || true
    else
        show_info "Hen√ºz log dosyasƒ± olu≈üturulmamƒ±≈ü."
    fi
}

# Yardƒ±m
show_help() {
    zenity --info \
        --title="Ubuntu Program Kurulum Y√∂neticisi - Yardƒ±m" \
        --width=700 \
        --height=500 \
        --text="üöÄ UBUNTU PROGRAM KURULUM Y√ñNETƒ∞Cƒ∞Sƒ∞

Bu program, Ubuntu'ya kolayca program kurmanƒ±zƒ± saƒülar.

üì¶ PROGRAM KURULUMU:
‚Ä¢ Kategoriler halinde d√ºzenlenmi≈ü programlar
‚Ä¢ Geli≈ütirici, Multimedya, Sistem, Ofis kategorileri
‚Ä¢ ƒ∞ki kurulum modu: Kategori Dolu ve Se√ßmeli

üíæ PAKET Lƒ∞STESƒ∞ √ñZELLƒ∞ƒûƒ∞:
‚Ä¢ Kurulu programlarƒ±nƒ±zƒ± yedekleyin
‚Ä¢ Format sonrasƒ± aynƒ± programlarƒ± geri kurun
‚Ä¢ Takƒ±m arkada≈ülarƒ±nƒ±zla program listesi payla≈üƒ±n

üìã KATEGORƒ∞LER:

üîß GELƒ∞≈ûTƒ∞Rƒ∞Cƒ∞ ARA√áLARI:
Git, VS Code, Node.js, Python, Vim

üéµ MULTƒ∞MEDYA:
VLC, GIMP, Spotify, Discord, Firefox

‚öôÔ∏è Sƒ∞STEM ARA√áLARI:
Htop, GParted, UFW, Synaptic

üìÑ OFƒ∞S ARA√áLARI:
LibreOffice, Thunderbird, Telegram

üéØ KURULUM MODLARI:

‚ö° KATEGORƒ∞ DOLU: Se√ßilen kategorilerdeki t√ºm programlarƒ± kur
üîç SE√áMELƒ∞: Her kategoride hangi programlarƒ± kuracaƒüƒ±nƒ± se√ß

üí° ƒ∞PU√áLARI:
‚Ä¢ Format atmadan √∂nce paket listesi olu≈üturun
‚Ä¢ Kurulum loglarƒ±nƒ± kontrol edin
‚Ä¢ Hata durumunda programƒ± yeniden ba≈ülatƒ±n"
}

# Ana men√º
main_menu() {
    while true; do
        local choice=$(zenity --list \
            --title="Ubuntu Program Kurulum Y√∂neticisi v2.2" \
            --text="üöÄ Yapmak istediƒüiniz i≈ülemi se√ßin:" \
            --radiolist \
            --column="Se√ß" \
            --column="ƒ∞≈ülem" \
            --column="A√ßƒ±klama" \
            --width=750 \
            --height=450 \
            TRUE "install" "üì¶ Program kurulumu yap" \
            FALSE "package_list" "üíæ Paket listesi i≈ülemleri (Yedekleme/Geri Y√ºkleme)" \
            FALSE "show_log" "üìÑ Kurulum loglarƒ±nƒ± g√∂r√ºnt√ºle" \
            FALSE "help" "‚ùì Yardƒ±m ve bilgilendirme" \
            FALSE "exit" "üö™ Programdan √ßƒ±k" 2>/dev/null)
        
        if [[ -z "$choice" ]]; then
            # Kullanƒ±cƒ± X butonuna bastƒ±
            if ask_confirmation "Programdan √ßƒ±kmak istediƒüinizden emin misiniz?"; then
                log_info "Program sonlandƒ±rƒ±ldƒ± (X butonu)"
                exit 0
            fi
            continue
        fi
        
        case "$choice" in
            "install")
                local categories
                if categories=$(select_categories); then
                    main_installation "$categories"
                fi
                # Kurulum bittikten sonra ana men√ºye d√∂n
                ;;
            "package_list")
                manage_package_lists
                ;;
            "show_log")
                show_log
                ;;
            "help")
                show_help
                ;;
            "exit")
                if ask_confirmation "Programdan √ßƒ±kmak istediƒüinizden emin misiniz?"; then
                    log_info "Program sonlandƒ±rƒ±ldƒ±"
                    exit 0
                fi
                ;;
        esac
    done
}

# Ana program
main() {
    # Root kontrol√º
    if [[ $EUID -eq 0 ]]; then
        zenity --error --title="Hata" --text="Bu program root kullanƒ±cƒ±sƒ± ile √ßalƒ±≈ütƒ±rƒ±lamaz!"
        exit 1
    fi
    
    # Log dosyasƒ±nƒ± ba≈ülat
    > "$LOG_FILE"
    log_info "Program ba≈ülatƒ±ldƒ± - v2.2"
    log_info "Sistem: $(lsb_release -d | cut -f2)"
    log_info "Kullanƒ±cƒ±: $USER"
    
    # Zenity kontrol√º
    check_zenity
    
    # Sistem kontrol√º
    check_system
    
    # Ana men√ºy√º ba≈ülat
    main_menu
}

# Programƒ± ba≈ülat
main "$@"